{
  "name": "onecodex",
  "tagline": "Command line interface and Python client library for the One Codex API",
  "body": "# One Codex API\r\n\r\n[![Circle CI](https://circleci.com/gh/onecodex/onecodex.png?style=shield&circle-token=d86a8fc55e54a645ee515387db9acee32068a6ad)](https://circleci.com/gh/onecodex/onecodex) [![Coverage Status](https://coveralls.io/repos/github/onecodex/onecodex/badge.svg)](https://coveralls.io/github/onecodex/onecodex)\r\n\r\nCommand line interface (CLI) and Python client library for interacting with the One Codex v1 API.\r\n\r\n**Warning**: The One Codex v1 API is currently being actively developed. While we do not expect major breaking changes (i.e., removing fields from resources currently available via the API), it should be treated as a **beta release**. If you need strong stability guarantees, we recommend using [our v0 API](docs.onecodex.com/v0/docs).\r\n\r\nMAINTAINERS: [@bovee](https://github.com/bovee), [@boydgreenfield](https://github.com/boydgreenfield)\r\n\r\n# Installation\r\n\r\nThis package provides 3 major pieces of functionality: (1) a core Python client library; (2) a simple CLI for interacting with the One Codex platform that uses that core library; and (3) optional extensions to the client library, which offers many features aimed at advanced users and provides functionality for use in interactive notebook environments (e.g., IPython notebooks).\r\n\r\n\r\n### _Basic installation_\r\nThe CLI (and core Python library) may be simply installed using `pip`. To download a minimal installation (#1 and #2), simply run:\r\n```shell\r\npip install onecodex\r\n```\r\n\r\n\r\n### _Installation with optional extensions_\r\nTo also download the optional extensions to the client library - and all of their dependencies - use the command `pip install onecodex[all]`. **Warning:** Because other packages used in the extensions rely upon `numpy` being present during their installation, `numpy` must be installed seperately first. So if you do not have `numpy` installed, and you are going to install `onecodex[all]` please do the following:\r\n```shell\r\n# If numpy is not installed in your environment\r\npip install numpy\r\n\r\n# Once you have numpy installed\r\npip install onecodex[all]\r\n```\r\n\r\n# Using the CLI\r\n\r\n## Logging in\r\nThe CLI supports authentication using either your One Codex API key or your One Codex username and password.\r\nTo log in using your username and password:\r\n\r\n```shell\r\nonecodex login\r\n```\r\n\r\nThis command will save a credentials file at `~/.onecodex`, which will then automatically be used for authentication the next time the CLI or Python client library are used (OS X/Linux only). You can clear this file and remove your API key from your machine with `onecodex logout`.\r\n\r\nIn a shared environment, we recommend directly using your One Codex API key, rather than logging in and storing it in a credentials file. To use API key authentication, simply pass your key as an argument to the `onecodex` command:\r\n```shell\r\nonecodex --api-key=YOUR_API_KEY samples\r\n```\r\n\r\nYour API key can be found on the [One Codex settings page](https://app.onecodex.com/settings) and should be 32 character string. You may also generate a new API key on the settings page in the web application. _Note_: Because your API key provides access to all of the samples and metadata in your account, you should immediately reset your key on the website if it is ever accidentally revealed or saved (e.g., checked into a GitHub repository).\r\n\r\n## Uploading files\r\nThe CLI supports uploading FASTA or FASTQ files (optionally gzip compressed) via the `upload` command.\r\n```shell\r\nonecodex upload bacterial_reads_file.fq.gz\r\n```\r\n\r\nMultiple files can be uploaded in a single command as well:\r\n```shell\r\nonecodex upload file1.fq.gz file2.fq.gz ...\r\n```\r\n\r\n_Note_: Files larger than **5GB** are supported, but require that you have the `aws-cli` package installed on your computer. `aws-cli` can be installed with `pip install aws-cli`.\r\n\r\n## Resources\r\nThe CLI supports retrieving your One Codex samples and analyses. The following resources may be queried:\r\n\r\n* Your samples (`Samples`)\r\n\r\n* Sample metadata (`Metadata`)\r\n\r\n* `Analyses`, which include several subtypes with additional functionality and fields:\r\n    * `Classifications`, which are basic metagenomic classification results for your samples\r\n    * `Panels`, which are _in silico_ panels for particular genes or other functional markers ([example on One Codex](https://app.onecodex.com/panel/sample))\r\n\r\n* `Jobs`, which provide information on the name, version, and type of analysis which was performed for a given `Analyses`\r\n\r\n\r\nSimply invoke the `onecodex` command, using one of the above resource names as a subcommand (all lowercase). For example:\r\n```shell\r\n# fetch all your samples\r\nonecodex samples\r\n\r\n# fetch a list of panels based on their ids\r\nonecodex panels 0123456789abcdef 0987654321fdecba\r\n```\r\n\r\n# Using the Python client library\r\n\r\n## Initalization\r\nTo load the API, use the following import:\r\n```python\r\nfrom onecodex.api import Api\r\n```\r\n\r\nInstantiate an API client either by passing your API key or automatically fetching your credentials from `~/.onecodex` if you've previously called `onecodex login`.\r\n\r\n```python\r\nfrom onecodex.api import Api\r\n\r\n# Instantiate a One Codex API object, will attempt to get credentials from ~/.onecodex\r\nocx = Api()\r\n\r\n# Instantiate an API object, manually specifying an API key\r\nocx = Api(api_key=\"YOUR_API_KEY_HERE\")\r\n```\r\n\r\n## Resources\r\n\r\nResources are exposed as attributes on the API object. You can fetch a resource directly by its ID or you can fetch it using the query interface. Currently you can access resources using either `get()` or `where()`. If you need help finding the ID for a sample, its identifier is part of its url on our webpage: e.g. for an analysis at `https://app.onecodex.com/analysis/public/1d9491c5c31345b6`, the ID is `1d9491c5c31345b6`. IDs are all short unique identifiers, consisting of 16 hexadecimal characters (`0-9a-f`).\r\n\r\n```python\r\nall_completed_analyses = ocx.Classifications.where(complete=True)\r\nsample_analysis = ocx.Classifications.get(\"1d9491c5c31345b6\")\r\nsample_analysis.results()  # Returns classification results as JSON object\r\nsample_analysis.table()    # Returns a pandas dataframe\r\n```\r\n\r\n# Development\r\n\r\nBefore developing, `git` and `python` (version 2.7 or >3.4) are needed.\r\n\r\nTo download the client library from GitHub:\r\n\r\n```shell\r\ngit clone https://github.com/onecodex/onecodex.git\r\ncd onecodex/\r\n```\r\n\r\nTo set up the project, first create a virtual environment and then install dependencies:\r\n\r\n```shell\r\nvirtualenv venv\r\nsource venv/bin/activate\r\npip install numpy  # numpy must be installed before any of its dependencies\r\npip install -r requirements.txt\r\n```\r\n\r\nTest are run through the makefile, and call tox. Note this may take awhile at first because of installing dependencies:\r\n\r\n```shell\r\nmake lint\r\nmake test\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}